{"version":3,"sources":["components/ImageGrid/loader.svg","constants/index.js","reducers/loadingReducer.js","reducers/usersReducer.js","reducers/errorReducers.js","reducers/index.js","api/index.js","actions/index.js","sagas/usersSaga.js","sagas/index.js","store/index.js","components/Month/index.js","components/Month/Month.js","components/ImageGrid/ImageGrid.js","components/ImageGrid/index.js","components/ImageGrid/logic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","USERS","loadingReducer","state","action","type","usersReducer","users","errorReducer","error","rootReducer","combineReducers","isLoading","fetchUsers","a","fetch","response","json","data","status","Error","errors","setUsers","handleUsersLoad","rootSaga","call","put","toString","takeEvery","all","usersSaga","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","Month","dateMonth","dateYear","names","useState","isRender","setRenderStatus","className","onMouseLeave","onMouseEnter","style","backgroundColor","length","map","name","i","key","mapDispatchToProps","loadUsers","MainComponent","connect","useEffect","months","user","Date","dob","getYear","getMonth","firstName","lastName","id","item","forEach","subItem","push","years","month","year","find","res","j","v","usersInMonths","src","loader","alt","JSON","stringify","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.48fb527c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.5d5d9eef.svg\";","const USERS = {\r\n  LOAD: \"USERS_LOAD\",\r\n  LOAD_SUCCESS: \"USERS_LOAD_SUCCESS\",\r\n  LOAD_FAIL: \"USERS_LOAD_FAIL\",\r\n};\r\n\r\nexport { USERS };\r\n","import { USERS } from \"../constants\";\r\n\r\nconst loadingReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case USERS.LOAD:\r\n      return true;\r\n    case USERS.LOAD_SUCCESS:\r\n      return false;\r\n    case USERS.LOAD_FAIL:\r\n      return false;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","import { USERS } from \"../constants\";\r\n\r\nconst usersReducer = (state = [], action) => {\r\n  if (action.type === USERS.LOAD_SUCCESS) {\r\n    return [...state, ...action.users];\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default usersReducer;\r\n","import { USERS } from \"../constants\";\r\n\r\nconst errorReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case USERS.LOAD_FAIL:\r\n      return action.error;\r\n    case USERS.LOAD:\r\n    case USERS.LOAD_SUCCESS:\r\n      return null;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default errorReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport loadingReducer from \"./loadingReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport errorReducer from \"./errorReducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  isLoading: loadingReducer,\r\n  users: usersReducer,\r\n  error: errorReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","const URL = \"https://yalantis-react-school-api.yalantis.com/api/task0/users\";\r\n\r\nconst fetchUsers = async () => {\r\n  const response = await fetch(URL);\r\n  const data = await response.json();\r\n  if (response.status >= 400) {\r\n    throw new Error(data.errors);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport { fetchUsers };\r\n","import { USERS } from \"../constants\";\r\n\r\nconst loadUsers = () => ({\r\n  type: USERS.LOAD,\r\n});\r\n\r\nconst setUsers = (users) => ({\r\n  type: USERS.LOAD_SUCCESS,\r\n  users,\r\n});\r\n\r\nconst setError = (error) => ({\r\n  type: USERS.LOAD_FAIL,\r\n  error,\r\n});\r\n\r\nexport { loadUsers, setUsers, setError };\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { USERS } from \"../constants\";\r\nimport { fetchUsers } from \"../api\";\r\nimport { setUsers, setError } from \"../actions\";\r\n\r\nexport function* handleUsersLoad() {\r\n  try {\r\n    const users = yield call(fetchUsers);\r\n    yield put(setUsers(users));\r\n  } catch (error) {\r\n    yield put(setError(error.toString()));\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield takeEvery(USERS.LOAD, handleUsersLoad);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport usersSaga from \"./usersSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([usersSaga()]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const store = createStore(\r\n        rootReducer,\r\n        compose(\r\n            applyMiddleware(sagaMiddleware),\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n        ),\r\n    );\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import Month from \"./Month\";\r\n\r\nexport default Month;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst Month = ({ dateMonth, dateYear, names }) => {\r\n  let [isRender, setRenderStatus] = useState(false);\r\n  return (\r\n    <div\r\n      className=\"month\"\r\n      onMouseLeave={() => setRenderStatus(!isRender)}\r\n      onMouseEnter={() => setRenderStatus(!isRender)}\r\n    >\r\n      <div\r\n        className=\"header\"\r\n        style={{\r\n          backgroundColor:\r\n            names.length <= 2\r\n              ? \"gray\"\r\n              : names.length <= 6\r\n              ? \"blue\"\r\n              : names.length <= 10\r\n              ? \"green\"\r\n              : \"red\",\r\n        }}\r\n      >\r\n        {dateYear}:{dateMonth}\r\n      </div>\r\n      {isRender && (\r\n        <div className=\"body\">\r\n          {names.map((name, i) => (\r\n            <div key={`${i}${name}`} className=\"name\">\r\n              {name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Month;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport usersInMonths from \"./logic\";\r\nimport Month from \"../Month\";\r\nimport { loadUsers } from \"../../actions\";\r\n\r\nimport loader from \"./loader.svg\";\r\nimport \"./styles.css\";\r\n\r\nconst MonthsGrid = ({ loadUsers, users, error, isLoading }) => {\r\n  useEffect(() => {\r\n    loadUsers();\r\n  }, []);\r\n  let months = usersInMonths(users);\r\n  return (\r\n    <div className=\"content\">\r\n      {isLoading ? (\r\n        <Fragment>\r\n          <img src={loader} className=\"loader\" alt=\"loader\" />\r\n        </Fragment>\r\n      ) : (\r\n        <section className=\"grid\">\r\n          {months.length\r\n            ? months.map((month) => <Month key={month.id} {...month} />)\r\n            : null}\r\n        </section>\r\n      )}\r\n      {error && <div className=\"error\">{JSON.stringify(error)}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ isLoading, users, error }) => ({\r\n  isLoading,\r\n  users,\r\n  error,\r\n});\r\n\r\nconst mapDispatchToProps = { loadUsers };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonthsGrid);\r\n","import MainComponent from \"./ImageGrid\";\r\n\r\nexport default MainComponent;\r\n","export default function usersInMonth(users) {\r\n  let months = [];\r\n  months = users.map((user) => {\r\n    return {\r\n      dateYear: +new Date(user.dob).getYear() + 1900,\r\n      dateMonth: +new Date(user.dob).getMonth() + 1,\r\n      names: [`${user.firstName} ${user.lastName}`],\r\n      id: `${new Date(user.dob).getMonth()}${\r\n        +new Date(user.dob).getYear() + 1900\r\n      }`,\r\n    };\r\n  });\r\n  months = months.map((item) => {\r\n    months.forEach((subItem) => {\r\n      if (item.id === subItem.id && item.names[0] !== subItem.names[0])\r\n        item.names.push(subItem.names[0]);\r\n    });\r\n    return item;\r\n  });\r\n  let years = [];\r\n  months.forEach((month) => {\r\n    years.length === 0\r\n      ? years.push({ year: month.dateYear, months: [] })\r\n      : years.find(\r\n          (year) =>\r\n            month.dateYear !== year.year &&\r\n            years.push({ year: month.dateYear, months: [] })\r\n        );\r\n  });\r\n  years.forEach((year) => {\r\n    months.forEach((month) => {\r\n      if (month.dateYear === year.year) year.months.push(month);\r\n    });\r\n  });\r\n  let res = [];\r\n  for (let j = 0; j < years.length; j++) {\r\n    for (let i = 0, v = 1; i < years[j].months.length || v <= 12; i++) {\r\n      if (years[j].months[i].dateMonth === v) {\r\n        res.push(years[j].months[i]);\r\n        v++;\r\n        i = 0;\r\n      }\r\n    }\r\n  }\r\n  return res;\r\n}\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport configureStore from \"./store/index\";\nimport MainComponent from \"./components/ImageGrid\";\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}